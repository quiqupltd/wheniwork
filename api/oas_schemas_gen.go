// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Error
type Error struct {
	Error   OptString     `json:"error"`
	Code    OptString     `json:"code"`
	Message OptString     `json:"message"`
	Details *ErrorDetails `json:"details"`
}

// GetError returns the value of Error.
func (s *Error) GetError() OptString {
	return s.Error
}

// GetCode returns the value of Code.
func (s *Error) GetCode() OptString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() *ErrorDetails {
	return s.Details
}

// SetError sets the value of Error.
func (s *Error) SetError(val OptString) {
	s.Error = val
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val OptString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val *ErrorDetails) {
	s.Details = val
}

type ErrorDetails struct{}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type R2ShiftsGetOK struct {
	Shifts []Shift `json:"shifts"`
	// This field will be present if the `include_repeating_shifts_to` parameter is provided. For each
	// fetched shift, if it is on a shift chain, we will insert all the shifts on that chain from the
	// first up to the date specified in the parameter.
	RepeatingShifts []Shift `json:"repeating_shifts"`
	// Any shift chains that the fetched shifts are a part of.
	Shiftchains []ShiftChain `json:"shiftchains"`
}

// GetShifts returns the value of Shifts.
func (s *R2ShiftsGetOK) GetShifts() []Shift {
	return s.Shifts
}

// GetRepeatingShifts returns the value of RepeatingShifts.
func (s *R2ShiftsGetOK) GetRepeatingShifts() []Shift {
	return s.RepeatingShifts
}

// GetShiftchains returns the value of Shiftchains.
func (s *R2ShiftsGetOK) GetShiftchains() []ShiftChain {
	return s.Shiftchains
}

// SetShifts sets the value of Shifts.
func (s *R2ShiftsGetOK) SetShifts(val []Shift) {
	s.Shifts = val
}

// SetRepeatingShifts sets the value of RepeatingShifts.
func (s *R2ShiftsGetOK) SetRepeatingShifts(val []Shift) {
	s.RepeatingShifts = val
}

// SetShiftchains sets the value of Shiftchains.
func (s *R2ShiftsGetOK) SetShiftchains(val []ShiftChain) {
	s.Shiftchains = val
}

// Ref: #/components/schemas/Shift
type Shift struct {
	ID        OptInt `json:"id"`
	AccountID OptInt `json:"account_id"`
	// The user assigned to the shift. Set to `0` for an Open Shift.
	UserID OptInt `json:"user_id"`
	// Location the shift belongs to.
	LocationID int       `json:"location_id"`
	PositionID OptInt    `json:"position_id"`
	SiteID     OptInt    `json:"site_id"`
	StartTime  time.Time `json:"start_time"`
	EndTime    time.Time `json:"end_time"`
	// Length of the unpaid breaks for the shift in hours.
	BreakTime OptFloat64 `json:"break_time"`
	// An array of breaks for the shift. When updating a shift, any existing breaks for the shift that
	// are not included in the request will be deleted.
	Breaks []ShiftScheduledBreak `json:"breaks"`
	// Assign color to shift.
	Color OptString `json:"color"`
	// Text notation for a Shift.
	Notes OptString `json:"notes"`
	// Is the shift Alert sent.
	Alerted OptBool `json:"alerted"`
	// Array of user IDs that can take this openshift. Null means all users are eligible.
	LinkedUsers []int `json:"linked_users"`
	// The ID to associate shifts in a repeating pattern.
	ShiftchainKey OptString `json:"shiftchain_key"`
	// Is the shift published.
	Published     OptBool     `json:"published"`
	PublishedDate OptDateTime `json:"published_date"`
	NotifiedAt    OptDateTime `json:"notified_at"`
	Instances     OptInt      `json:"instances"`
	CreatedAt     OptDateTime `json:"created_at"`
	UpdatedAt     OptDateTime `json:"updated_at"`
	// If enabled; When the user confirmed the shift.
	Acknowledged OptBool `json:"acknowledged"`
	// If enabled; When the user confirmed the shift.
	AcknowledgedAt OptDateTime `json:"acknowledged_at"`
	// The user that created the shift.
	CreatorID OptInt  `json:"creator_id"`
	IsOpen    OptBool `json:"is_open"`
	// Does this shift require OpenShift Approval.
	RequiresOpenshiftApproval OptBool `json:"requires_openshift_approval"`
	// ID of the associated OpenShift Approval request.
	OpenshiftApprovalRequestID OptInt `json:"openshift_approval_request_id"`
	// Used to indicate that a manager or supervisor has approved a missing time entry for this shift.
	IsApprovedWithoutTime OptBool `json:"is_approved_without_time"`
	// Is the shift a shared OpenShift.
	IsShared OptBool `json:"is_shared"`
	// Is rounding active for shift.
	IsTrimmed OptBool `json:"is_trimmed"`
}

// GetID returns the value of ID.
func (s *Shift) GetID() OptInt {
	return s.ID
}

// GetAccountID returns the value of AccountID.
func (s *Shift) GetAccountID() OptInt {
	return s.AccountID
}

// GetUserID returns the value of UserID.
func (s *Shift) GetUserID() OptInt {
	return s.UserID
}

// GetLocationID returns the value of LocationID.
func (s *Shift) GetLocationID() int {
	return s.LocationID
}

// GetPositionID returns the value of PositionID.
func (s *Shift) GetPositionID() OptInt {
	return s.PositionID
}

// GetSiteID returns the value of SiteID.
func (s *Shift) GetSiteID() OptInt {
	return s.SiteID
}

// GetStartTime returns the value of StartTime.
func (s *Shift) GetStartTime() time.Time {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *Shift) GetEndTime() time.Time {
	return s.EndTime
}

// GetBreakTime returns the value of BreakTime.
func (s *Shift) GetBreakTime() OptFloat64 {
	return s.BreakTime
}

// GetBreaks returns the value of Breaks.
func (s *Shift) GetBreaks() []ShiftScheduledBreak {
	return s.Breaks
}

// GetColor returns the value of Color.
func (s *Shift) GetColor() OptString {
	return s.Color
}

// GetNotes returns the value of Notes.
func (s *Shift) GetNotes() OptString {
	return s.Notes
}

// GetAlerted returns the value of Alerted.
func (s *Shift) GetAlerted() OptBool {
	return s.Alerted
}

// GetLinkedUsers returns the value of LinkedUsers.
func (s *Shift) GetLinkedUsers() []int {
	return s.LinkedUsers
}

// GetShiftchainKey returns the value of ShiftchainKey.
func (s *Shift) GetShiftchainKey() OptString {
	return s.ShiftchainKey
}

// GetPublished returns the value of Published.
func (s *Shift) GetPublished() OptBool {
	return s.Published
}

// GetPublishedDate returns the value of PublishedDate.
func (s *Shift) GetPublishedDate() OptDateTime {
	return s.PublishedDate
}

// GetNotifiedAt returns the value of NotifiedAt.
func (s *Shift) GetNotifiedAt() OptDateTime {
	return s.NotifiedAt
}

// GetInstances returns the value of Instances.
func (s *Shift) GetInstances() OptInt {
	return s.Instances
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Shift) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Shift) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetAcknowledged returns the value of Acknowledged.
func (s *Shift) GetAcknowledged() OptBool {
	return s.Acknowledged
}

// GetAcknowledgedAt returns the value of AcknowledgedAt.
func (s *Shift) GetAcknowledgedAt() OptDateTime {
	return s.AcknowledgedAt
}

// GetCreatorID returns the value of CreatorID.
func (s *Shift) GetCreatorID() OptInt {
	return s.CreatorID
}

// GetIsOpen returns the value of IsOpen.
func (s *Shift) GetIsOpen() OptBool {
	return s.IsOpen
}

// GetRequiresOpenshiftApproval returns the value of RequiresOpenshiftApproval.
func (s *Shift) GetRequiresOpenshiftApproval() OptBool {
	return s.RequiresOpenshiftApproval
}

// GetOpenshiftApprovalRequestID returns the value of OpenshiftApprovalRequestID.
func (s *Shift) GetOpenshiftApprovalRequestID() OptInt {
	return s.OpenshiftApprovalRequestID
}

// GetIsApprovedWithoutTime returns the value of IsApprovedWithoutTime.
func (s *Shift) GetIsApprovedWithoutTime() OptBool {
	return s.IsApprovedWithoutTime
}

// GetIsShared returns the value of IsShared.
func (s *Shift) GetIsShared() OptBool {
	return s.IsShared
}

// GetIsTrimmed returns the value of IsTrimmed.
func (s *Shift) GetIsTrimmed() OptBool {
	return s.IsTrimmed
}

// SetID sets the value of ID.
func (s *Shift) SetID(val OptInt) {
	s.ID = val
}

// SetAccountID sets the value of AccountID.
func (s *Shift) SetAccountID(val OptInt) {
	s.AccountID = val
}

// SetUserID sets the value of UserID.
func (s *Shift) SetUserID(val OptInt) {
	s.UserID = val
}

// SetLocationID sets the value of LocationID.
func (s *Shift) SetLocationID(val int) {
	s.LocationID = val
}

// SetPositionID sets the value of PositionID.
func (s *Shift) SetPositionID(val OptInt) {
	s.PositionID = val
}

// SetSiteID sets the value of SiteID.
func (s *Shift) SetSiteID(val OptInt) {
	s.SiteID = val
}

// SetStartTime sets the value of StartTime.
func (s *Shift) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *Shift) SetEndTime(val time.Time) {
	s.EndTime = val
}

// SetBreakTime sets the value of BreakTime.
func (s *Shift) SetBreakTime(val OptFloat64) {
	s.BreakTime = val
}

// SetBreaks sets the value of Breaks.
func (s *Shift) SetBreaks(val []ShiftScheduledBreak) {
	s.Breaks = val
}

// SetColor sets the value of Color.
func (s *Shift) SetColor(val OptString) {
	s.Color = val
}

// SetNotes sets the value of Notes.
func (s *Shift) SetNotes(val OptString) {
	s.Notes = val
}

// SetAlerted sets the value of Alerted.
func (s *Shift) SetAlerted(val OptBool) {
	s.Alerted = val
}

// SetLinkedUsers sets the value of LinkedUsers.
func (s *Shift) SetLinkedUsers(val []int) {
	s.LinkedUsers = val
}

// SetShiftchainKey sets the value of ShiftchainKey.
func (s *Shift) SetShiftchainKey(val OptString) {
	s.ShiftchainKey = val
}

// SetPublished sets the value of Published.
func (s *Shift) SetPublished(val OptBool) {
	s.Published = val
}

// SetPublishedDate sets the value of PublishedDate.
func (s *Shift) SetPublishedDate(val OptDateTime) {
	s.PublishedDate = val
}

// SetNotifiedAt sets the value of NotifiedAt.
func (s *Shift) SetNotifiedAt(val OptDateTime) {
	s.NotifiedAt = val
}

// SetInstances sets the value of Instances.
func (s *Shift) SetInstances(val OptInt) {
	s.Instances = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Shift) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Shift) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetAcknowledged sets the value of Acknowledged.
func (s *Shift) SetAcknowledged(val OptBool) {
	s.Acknowledged = val
}

// SetAcknowledgedAt sets the value of AcknowledgedAt.
func (s *Shift) SetAcknowledgedAt(val OptDateTime) {
	s.AcknowledgedAt = val
}

// SetCreatorID sets the value of CreatorID.
func (s *Shift) SetCreatorID(val OptInt) {
	s.CreatorID = val
}

// SetIsOpen sets the value of IsOpen.
func (s *Shift) SetIsOpen(val OptBool) {
	s.IsOpen = val
}

// SetRequiresOpenshiftApproval sets the value of RequiresOpenshiftApproval.
func (s *Shift) SetRequiresOpenshiftApproval(val OptBool) {
	s.RequiresOpenshiftApproval = val
}

// SetOpenshiftApprovalRequestID sets the value of OpenshiftApprovalRequestID.
func (s *Shift) SetOpenshiftApprovalRequestID(val OptInt) {
	s.OpenshiftApprovalRequestID = val
}

// SetIsApprovedWithoutTime sets the value of IsApprovedWithoutTime.
func (s *Shift) SetIsApprovedWithoutTime(val OptBool) {
	s.IsApprovedWithoutTime = val
}

// SetIsShared sets the value of IsShared.
func (s *Shift) SetIsShared(val OptBool) {
	s.IsShared = val
}

// SetIsTrimmed sets the value of IsTrimmed.
func (s *Shift) SetIsTrimmed(val OptBool) {
	s.IsTrimmed = val
}

// Ref: #/components/schemas/ShiftChain
type ShiftChain struct {
	Key OptString `json:"key"`
	// The RFC5545-compliant RRule representing the shift chain.
	Rrule OptString `json:"rrule"`
	// The date when the shift chain ends.
	Until OptDate `json:"until"`
	// Represents the week frequency interval. `1` means weekly, `2` means every two weeks, etc.
	Week OptInt `json:"week"`
	// A bitmask of the weekdays which shifts in this chain occur on. In a seven-bit binary number, the
	// most
	// significant bit represents Sunday and the least significant bit represents Monday (0b1000001).
	// Examples:
	// | Days                      | Binary      | Decimal |
	// |---------------------------|-------------|---------|
	// | Monday through Friday     | `0b0011111` | 31      |
	// | Monday, Wednesday, Friday | `0b0010101` | 21      |
	// | Saturday and Sunday       | `0b1100000` | 96      |.
	Weekdays OptInt `json:"weekdays"`
	// The timezone this chain is built in.
	TimezoneID OptString `json:"timezone_id"`
	// The number of shifts created by this chain.
	//
	// Deprecated: schema marks this property as deprecated.
	Count OptInt `json:"count"`
}

// GetKey returns the value of Key.
func (s *ShiftChain) GetKey() OptString {
	return s.Key
}

// GetRrule returns the value of Rrule.
func (s *ShiftChain) GetRrule() OptString {
	return s.Rrule
}

// GetUntil returns the value of Until.
func (s *ShiftChain) GetUntil() OptDate {
	return s.Until
}

// GetWeek returns the value of Week.
func (s *ShiftChain) GetWeek() OptInt {
	return s.Week
}

// GetWeekdays returns the value of Weekdays.
func (s *ShiftChain) GetWeekdays() OptInt {
	return s.Weekdays
}

// GetTimezoneID returns the value of TimezoneID.
func (s *ShiftChain) GetTimezoneID() OptString {
	return s.TimezoneID
}

// GetCount returns the value of Count.
func (s *ShiftChain) GetCount() OptInt {
	return s.Count
}

// SetKey sets the value of Key.
func (s *ShiftChain) SetKey(val OptString) {
	s.Key = val
}

// SetRrule sets the value of Rrule.
func (s *ShiftChain) SetRrule(val OptString) {
	s.Rrule = val
}

// SetUntil sets the value of Until.
func (s *ShiftChain) SetUntil(val OptDate) {
	s.Until = val
}

// SetWeek sets the value of Week.
func (s *ShiftChain) SetWeek(val OptInt) {
	s.Week = val
}

// SetWeekdays sets the value of Weekdays.
func (s *ShiftChain) SetWeekdays(val OptInt) {
	s.Weekdays = val
}

// SetTimezoneID sets the value of TimezoneID.
func (s *ShiftChain) SetTimezoneID(val OptString) {
	s.TimezoneID = val
}

// SetCount sets the value of Count.
func (s *ShiftChain) SetCount(val OptInt) {
	s.Count = val
}

// Merged schema.
// Ref: #/components/schemas/ShiftScheduledBreak
type ShiftScheduledBreak struct {
	// ID of the break. Provide in the request when updating an existing break.
	ID        OptInt `json:"id"`
	AccountID OptInt `json:"account_id"`
	// The length of the break (seconds).
	Length int `json:"length"`
	// Whether the break is a paid rest break (true) or unpaid meal break (false).
	Paid bool `json:"paid"`
	// Breaks are sorted by start time if it is available. If no start time is provided, breaks are
	// sorted by their position in the request. In a mixed list, breaks without a start time keep their
	// original position, while breaks with a start time are sorted amongst themselves.
	Sort OptInt `json:"sort"`
	// Date and time the break was created at.
	CreatedAt OptString `json:"created_at"`
	// The id of the user who created the break.
	CreatedBy OptInt `json:"created_by"`
	// Date and time the break was last updated.
	UpdatedAt OptString `json:"updated_at"`
	// The id of the user who last edited the break.
	UpdatedBy OptInt `json:"updated_by"`
	// The ID of the shift that the break applies to.
	ShiftID OptInt `json:"shift_id"`
	// The start time of the break. Null if the break does not have a start time.
	StartTime OptString `json:"start_time"`
	// The end time of the break. Null if the break does not have an end time. Calculated from the start
	// time of the break and the length.
	EndTime OptString `json:"end_time"`
}

// GetID returns the value of ID.
func (s *ShiftScheduledBreak) GetID() OptInt {
	return s.ID
}

// GetAccountID returns the value of AccountID.
func (s *ShiftScheduledBreak) GetAccountID() OptInt {
	return s.AccountID
}

// GetLength returns the value of Length.
func (s *ShiftScheduledBreak) GetLength() int {
	return s.Length
}

// GetPaid returns the value of Paid.
func (s *ShiftScheduledBreak) GetPaid() bool {
	return s.Paid
}

// GetSort returns the value of Sort.
func (s *ShiftScheduledBreak) GetSort() OptInt {
	return s.Sort
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ShiftScheduledBreak) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetCreatedBy returns the value of CreatedBy.
func (s *ShiftScheduledBreak) GetCreatedBy() OptInt {
	return s.CreatedBy
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ShiftScheduledBreak) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetUpdatedBy returns the value of UpdatedBy.
func (s *ShiftScheduledBreak) GetUpdatedBy() OptInt {
	return s.UpdatedBy
}

// GetShiftID returns the value of ShiftID.
func (s *ShiftScheduledBreak) GetShiftID() OptInt {
	return s.ShiftID
}

// GetStartTime returns the value of StartTime.
func (s *ShiftScheduledBreak) GetStartTime() OptString {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *ShiftScheduledBreak) GetEndTime() OptString {
	return s.EndTime
}

// SetID sets the value of ID.
func (s *ShiftScheduledBreak) SetID(val OptInt) {
	s.ID = val
}

// SetAccountID sets the value of AccountID.
func (s *ShiftScheduledBreak) SetAccountID(val OptInt) {
	s.AccountID = val
}

// SetLength sets the value of Length.
func (s *ShiftScheduledBreak) SetLength(val int) {
	s.Length = val
}

// SetPaid sets the value of Paid.
func (s *ShiftScheduledBreak) SetPaid(val bool) {
	s.Paid = val
}

// SetSort sets the value of Sort.
func (s *ShiftScheduledBreak) SetSort(val OptInt) {
	s.Sort = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ShiftScheduledBreak) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetCreatedBy sets the value of CreatedBy.
func (s *ShiftScheduledBreak) SetCreatedBy(val OptInt) {
	s.CreatedBy = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ShiftScheduledBreak) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetUpdatedBy sets the value of UpdatedBy.
func (s *ShiftScheduledBreak) SetUpdatedBy(val OptInt) {
	s.UpdatedBy = val
}

// SetShiftID sets the value of ShiftID.
func (s *ShiftScheduledBreak) SetShiftID(val OptInt) {
	s.ShiftID = val
}

// SetStartTime sets the value of StartTime.
func (s *ShiftScheduledBreak) SetStartTime(val OptString) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *ShiftScheduledBreak) SetEndTime(val OptString) {
	s.EndTime = val
}

type WToken struct {
	Token string
}

// GetToken returns the value of Token.
func (s *WToken) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *WToken) SetToken(val string) {
	s.Token = val
}
